# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build-Push-Deploy Docker Images

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

env:
  AWS_REGION: eu-west-2                                              # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 047269056867.dkr.ecr.eu-west-2.amazonaws.com/myapp # set this to your Amazon ECR repository name
  ECS_SERVICE: myapp                                        # set this to your Amazon ECS service name
  ECS_CLUSTER: demo-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ci/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: myapp           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      with:
        arguments: build
  
  build-push-docker-image: 
  
   runs-on: ubuntu-latest
   
   steps:
    - uses: actions/checkout@v3
    - name: Get the version
      id: vars
      run: echo ::set-output name=tag::$(echo ${GITHUB_SHA:10})
    - name: Docker login
      env:
        DOCKER_USERNAME: ${{ secrets.dockerhub_username }}
        DOCKER_PASSWORD: ${{ secrets.dockerhub_password }}
      run : docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD" qualsafedemo.jfrog.io
      #run : echo $DOCKER_USERNAME
    - name: Build the Docker image
      #run: docker build myapp . --file Dockerfile --tag ${{secrets.docker_username}}/${{secrets.repo_name}}:${{steps.vars.outputs.tag}}
      run: docker build -t myapp .
    - name: Docker tag myapp 
      run: docker tag myapp qualsafedemo.jfrog.io/qualsafedemo-docker-local/myapp:${{steps.vars.outputs.tag}} 
    - name: Publish dockerimage to jfrog docker hub
      run: docker push qualsafedemo.jfrog.io/qualsafedemo-docker-local/myapp:${{steps.vars.outputs.tag}} 
  
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
